-- habits

create table habits(
  h_id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  h_name text check not null,
  h_question text check not null,
  h_note text,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table habits enable row level security;

create policy "Users can create habits." on habits for
insert with check (auth.uid() = user_id);
create policy "Users can view their own habits." on habits for
select using ((select auth.uid()) = user_id);
create policy "Users can update their own habits." on habits for
update using ((select auth.uid()) = user_id);
create policy "Users can delete their own habits." on habits for
delete using ((select auth.uid()) = user_id);

-- habits log
CREATE TABLE habits_log (
  log_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  h_id BIGINT REFERENCES habits(h_id) ON DELETE CASCADE NOT NULL,
  log_date DATE NOT NULL,
  log_time TIME WITH TIME ZONE DEFAULT current_time NOT NULL,
  is_completed BOOLEAN DEFAULT FALSE,
  inserted_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE (h_id, log_date, log_time)
);

-- insert logs procedure for daily habits generation
CREATE OR REPLACE FUNCTION generate_daily_habit_logs() RETURNS void AS $$
BEGIN
  INSERT INTO habits_log (h_id, log_date, log_time)
  SELECT h_id, current_date, current_time
  FROM habits;
END;
$$ LANGUAGE plpgsql;

-- cron job for daily habits creation
SELECT cron.schedule('daily_habit_logs', '0 0 * * *', 'SELECT generate_daily_habit_logs()');

-- create a 7 day log for every new habit
CREATE OR REPLACE FUNCTION create_habit_logs_for_last_7_days() RETURNS TRIGGER AS $$
BEGIN
  -- Insert a log for each of the past 7 days
  INSERT INTO habits_log (h_id, log_date)
  SELECT NEW.h_id, current_date - i
  FROM generate_series(0, 6) AS i;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- trigger to invoke the 7 day log generation function
CREATE TRIGGER after_habit_insert
AFTER INSERT ON habits
FOR EACH ROW
EXECUTE FUNCTION create_habit_logs_for_last_7_days();

-- journal
