-- habits

create table habits(
  h_id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  h_name text check not null,
  h_question text check not null,
  h_note text,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table habits enable row level security;

create policy "Users can create habits." on habits for
insert with check (auth.uid() = user_id);
create policy "Users can view their own habits." on habits for
select using ((select auth.uid()) = user_id);
create policy "Users can update their own habits." on habits for
update using ((select auth.uid()) = user_id);
create policy "Users can delete their own habits." on habits for
delete using ((select auth.uid()) = user_id);

-- habits log

CREATE TABLE habits_log (
  log_id bigint generated by default as identity primary key,
  h_id bigint references habits(h_id) on delete cascade not null,
  log_date date not null,
  is_completed boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  UNIQUE (h_id, log_date)
);

-- insert logs procedure

CREATE OR REPLACE FUNCTION generate_daily_habit_logs() RETURNS void AS $$
BEGIN
  INSERT INTO habits_log (h_id, log_date)
  SELECT h_id, current_date
  FROM habits
  WHERE h_id NOT IN (
    SELECT h_id FROM habits_log WHERE log_date = current_date
  );
END;
$$ LANGUAGE plpgsql;

-- cron job for daily habits creation

SELECT cron.schedule('daily_habit_logs', '0 0 * * *', 'CALL generate_daily_habit_logs()');